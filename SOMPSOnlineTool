<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <title>Social Panorama</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: #f5f5f5;
            -webkit-text-size-adjust: 100%;
            font-size: 1rem;
        }
        #clockContainer {
            position: relative;
            margin: 20px;
            width: 100%;
            max-width: 500px;
            overflow: hidden;
        }
        #clockCanvas {
            border: 1px solid #333;
            border-radius: 50%;
            background-color: #f9f9f9;
            display: block;
            width: 100%;
            height: auto;
            max-width: 500px;
            max-height: 500px;
        }
        #clickLog {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
            max-width: 500px;
            background-color: white;
            font-size: 0.875rem;
        }
        button {
            margin: 10px;
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
        }
        button:hover {
            background-color: #45a049;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #resetBtn {
            background-color: #f44336;
        }
        #resetBtn:hover {
            background-color: #d32f2f;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            font-size: 0.875rem;
        }
        input[type="number"], input[type="text"], input[type="date"] {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.875rem;
        }
        input:disabled {
            background-color: #f0f0f0;
        }
        .radio-group {
            margin-top: 10px;
        }
        .radio-group label {
            display: inline;
            font-weight: normal;
            margin-left: 5px;
            font-size: 0.875rem;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 5px;
            border-bottom: 1px solid #eee;
            font-weight: bold;
            white-space: nowrap;
            font-size: 0.875rem;
        }
        .required-field {
            border: 1px solid red !important;
        }
        .canvas-input {
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0,0,0,0.3);
            width: 100%;
            max-width: 180px;
            margin-bottom: 20px;
        }
        .canvas-input-title {
            font-weight: bold;
            margin-bottom: 10px;
            text-align: center;
            font-size: 0.875rem;
        }
        .canvas-input-group {
            margin-bottom: 12px;
        }
        .canvas-input-group label {
            font-size: 0.75rem;
            margin-bottom: 3px;
        }
        .canvas-input-group input {
            padding: 5px;
            font-size: 0.75rem;
            width: 100%;
        }
        .radio-group-small {
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 4px;
            flex-wrap: nowrap;
            margin-top: 5px;
            white-space: nowrap;
        }
        .radio-group-small div {
            display: flex;
            align-items: center;
            gap: 4px;
            height: 20px;
        }
        .radio-group-small label {
            display: inline;
            margin: 0;
            padding: 0;
            font-weight: normal;
            white-space: nowrap;
        }
        .radio-group-small input[type="radio"] {
            margin: 0;
            vertical-align: middle;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }
		.input-containers {
			display: flex;
			justify-content: center; /* Changed from space-between to center */
			gap: 5px; /* Added gap between containers */
			width: 100%;
			max-width: 350px;
		}
        .info-fields {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            width: 100%;
            max-width: 500px;
            margin-bottom: 20px;
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }
        .info-fields .form-group {
            margin-bottom: 0;
        }
        .info-fields label {
            font-size: 0.75rem;
        }
        .info-fields input {
            font-size: 0.875rem;
        }
        .button-container {
            display: flex;
            justify-content: center;
            width: 100%;
        }
        .logo-container {
            text-align: center;
            margin-bottom: 10px;
            width: 100%;
            max-width: 800px;
        }
        .logo-container img {
            max-width: 100%;
            height: auto;
        }
		        /* Added for label positioning */
        .marker-label {
            position: absolute;
            font-weight: bold;
            pointer-events: none;
            transform: translateX(-50%);
            z-index: 10;
        }
		
    </style>
</head>
<body>
    <!-- Add the logo div here -->
    <div class="logo-container">
        <img src="SOMSP Logo.png" alt="Society for Mental Space Psychology Logo">
    </div>

    <!-- Information fields -->
    <div class="info-fields">
        <div class="form-group">
            <label for="therapistNumber">Therapist #</label>
            <input type="text" id="therapistNumber">
        </div>
        <div class="form-group">
            <label for="participantNumber">Participant #</label>
            <input type="text" id="participantNumber">
        </div>
        <div class="form-group">
            <label for="issueName">Issue Name</label>
            <input type="text" id="issueName">
        </div>
        <div class="form-group">
            <label for="modality">Modality</label>
            <input type="text" id="modality">
        </div>
        <div class="form-group">
            <label for="hours">Hours</label>
            <input type="number" id="hours" min="0" step="0.1">
        </div>
        <div class="form-group">
            <label for="sessionDate">Date </label>
            <input type="text" id="sessionDate" placeholder="e.g. 20 Jun 2023">
        </div>
    </div>

    <!-- Rest of your HTML remains exactly the same -->
    <h1></h1>
    
    <div class="input-containers">
        <!-- START Container -->
        <div class="canvas-input">
            <div class="canvas-input-title">BEFORE</div>
            <div class="canvas-input-group">
                <label for="startSudsInput">SUDS (1-10):</label>
                <input type="number" id="startSudsInput" min="1" max="10" required>
            </div>
            <div class="canvas-input-group">
                <label for="startDistance">Distance (m):</label>
                <input type="number" id="startDistance" min="0" step="0.01" disabled>
            </div>
            <div class="canvas-input-group">
                <label for="startEyeLevel">Eye Level (cm):</label>
                <input type="number" id="startEyeLevel" disabled>
            </div>
            <div class="canvas-input-group radio-group-small">
                <div>
                    <input type="radio" id="startAbove" name="startPosition" value="above" checked disabled>
                    <label for="startAbove">Above</label>
                </div>
                <div>
                    <input type="radio" id="startBelow" name="startPosition" value="below" disabled>
                    <label for="startBelow">Below</label>
                </div>
                <div>
                    <input type="radio" id="startEyeLevelRadio" name="startPosition" value="eye-level" disabled>
                    <label for="startEyeLevelRadio">Eye Level</label>
                </div>
            </div>
        </div>
        
        <!-- END Container -->
        <div class="canvas-input">
            <div class="canvas-input-title">AFTER</div>
            <div class="canvas-input-group">
                <label for="endSudsInput">SUDS (1-10):</label>
                <input type="number" id="endSudsInput" min="1" max="10" required disabled>
            </div>
            <div class="canvas-input-group">
                <label for="endDistance">Distance (m):</label>
                <input type="number" id="endDistance" min="0" step="0.01" disabled>
            </div>
            <div class="canvas-input-group">
                <label for="endEyeLevel">Eye Level (cm):</label>
                <input type="number" id="endEyeLevel" disabled>
            </div>
            <div class="canvas-input-group radio-group-small">
                <div>
                    <input type="radio" id="endAbove" name="endPosition" value="above" checked disabled>
                    <label for="endAbove">Above</label>
                </div>
                <div>
                    <input type="radio" id="endBelow" name="endPosition" value="below" disabled>
                    <label for="endBelow">Below</label>
                </div>
                <div>
                    <input type="radio" id="endEyeLevelRadio" name="endPosition" value="eye-level" disabled>
                    <label for="endEyeLevelRadio">Eye Level</label>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Rest of your HTML remains exactly the same -->
    <div id="clockContainer">
        <canvas id="clockCanvas" width="500" height="500"></canvas>
    </div>
    
    <div class="button-container">
        <button id="downloadBtn" disabled>Download</button>
        <button id="resetBtn">Reset</button>
    </div>
    <div id="clickLog"></div>

    <script>
        // Your JavaScript remains exactly the same
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('clockCanvas');
            const ctx = canvas.getContext('2d');
            const clickLog = document.getElementById('clickLog');
            const downloadBtn = document.getElementById('downloadBtn');
            const resetBtn = document.getElementById('resetBtn');
            
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = Math.min(centerX, centerY) * 0.8;
            
            const colorPalette = ['#FF5733', '#33FF57'];
			const labelNames = ['Before', 'After']; // Labels for markers
            
            let clicks = [];
            let nextLabelCharCode = 65;
            let startSudsValue = null;
            let endSudsValue = null;
            let startCompleted = false;
            let endCompleted = false;

            // Get references to all input fields
            const startSudsInput = document.getElementById('startSudsInput');
            const startDistanceInput = document.getElementById('startDistance');
            const startEyeLevelInput = document.getElementById('startEyeLevel');
            const startAboveInput = document.getElementById('startAbove');
            const startBelowInput = document.getElementById('startBelow');
            const startEyeLevelRadio = document.getElementById('startEyeLevelRadio');
            
            const endSudsInput = document.getElementById('endSudsInput');
            const endDistanceInput = document.getElementById('endDistance');
            const endEyeLevelInput = document.getElementById('endEyeLevel');
            const endAboveInput = document.getElementById('endAbove');
            const endBelowInput = document.getElementById('endBelow');
            const endEyeLevelRadio = document.getElementById('endEyeLevelRadio');

            // Added for label positioning
            const labelElements = {
                start: document.createElement('div'),
                end: document.createElement('div')
            };
            
            // Initialize label elements
            Object.values(labelElements).forEach(el => {
                el.className = 'marker-label';
                el.style.display = 'none';
                document.body.appendChild(el);
            });

            // Reset function
            function resetData() {
                // Clear clock face data
                clicks = [];
                nextLabelCharCode = 65;
                
                // Reset container boxes
                startSudsInput.value = '';
                startDistanceInput.value = '';
                startEyeLevelInput.value = '';
                startAboveInput.checked = true;
                startSudsValue = null;
                startCompleted = false;
                
                endSudsInput.value = '';
                endDistanceInput.value = '';
                endEyeLevelInput.value = '';
                endAboveInput.checked = true;
                endSudsValue = null;
                endCompleted = false;
                
                // Clear log
                clickLog.innerHTML = '';
                
                // Redraw clock
                drawClock();
                
                // Update field states
                updateFieldStates();
            }

            // Add event listener for reset button
            resetBtn.addEventListener('click', resetData);

           // Update the updateFieldStates function to enable end SUDS input after first click
			function updateFieldStates() {
				const startFieldsComplete = startSudsValue !== null;
				const clockClicked = clicks.length > 0;
    
			// Enable/disable START fields
				startDistanceInput.disabled = !(startFieldsComplete && clockClicked);
				startEyeLevelInput.disabled = !(startFieldsComplete && clockClicked);
				startAboveInput.disabled = !(startFieldsComplete && clockClicked);
				startBelowInput.disabled = !(startFieldsComplete && clockClicked);
				startEyeLevelRadio.disabled = !(startFieldsComplete && clockClicked);
    
			// Enable/disable END fields
				const endFieldsEnabled = startFieldsComplete && clockClicked;
				endSudsInput.disabled = !(endFieldsEnabled && clicks.length === 1); // Enable SUDS after first click
				endDistanceInput.disabled = !(endFieldsEnabled && clicks.length === 2 && endSudsValue !== null);
				endEyeLevelInput.disabled = !(endFieldsEnabled && clicks.length === 2 && endSudsValue !== null);
				endAboveInput.disabled = !(endFieldsEnabled && clicks.length === 2 && endSudsValue !== null);
				endBelowInput.disabled = !(endFieldsEnabled && clicks.length === 2 && endSudsValue !== null);
				endEyeLevelRadio.disabled = !(endFieldsEnabled && clicks.length === 2 && endSudsValue !== null);
    
			// Enable/disable download button
				downloadBtn.disabled = !(startFieldsComplete && endSudsValue !== null && clicks.length === 2);
			}

            // Validate START SUDS before enabling other fields
            startSudsInput.addEventListener('change', function() {
                const value = parseInt(this.value);
                if (value >= 1 && value <= 10) {
                    startSudsValue = value;
                    this.classList.remove('required-field');
                    updateFieldStates();
                    updateLog();
                } else {
                    this.classList.add('required-field');
                    startSudsValue = null;
                    updateFieldStates();
                }
            });

            // Validate END SUDS
            endSudsInput.addEventListener('change', function() {
                const value = parseInt(this.value);
                if (value >= 1 && value <= 10) {
                    endSudsValue = value;
                    this.classList.remove('required-field');
                    updateLog();
                    updateFieldStates();
                } else {
                    this.classList.add('required-field');
                    endSudsValue = null;
                }
            });

            // Draw the clock face with all numbers and markers
            function drawClock() {
                // Clear canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Draw clock face
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
                ctx.strokeStyle = '#333';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // Draw hour markers and numbers
                ctx.font = 'bold 16px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = '#333';
                
                for (let i = 1; i <= 12; i++) {
                    const angle = (i - 3) * Math.PI / 6;
                    const markerX = centerX + Math.cos(angle) * (radius * 0.8);
                    const markerY = centerY + Math.sin(angle) * (radius * 0.8);
                    
                    // Draw hour marker dot
                    ctx.beginPath();
                    ctx.arc(markerX, markerY, 3, 0, 2 * Math.PI);
                    ctx.fill();
                    
                    // Draw hour number
                    const textX = centerX + Math.cos(angle) * (radius * 0.9);
                    const textY = centerY + Math.sin(angle) * (radius * 0.9);
                    ctx.fillText(i.toString(), textX, textY);
                }
                
                // Draw center magenta circle with triangle
                drawCenterMarker();
                
                // Draw all click markers (max 2)
                // Remove previous labels
                labelElements.start.style.display = 'none';
                labelElements.end.style.display = 'none';

                // Draw all click markers (max 2) with labels below
                for (let i = 0; i < Math.min(clicks.length, 2); i++) {
                    const click = clicks[i];
                    
                    // Draw marker
                    ctx.beginPath();
                    ctx.arc(click.x, click.y, 10, 0, 2 * Math.PI);
                    ctx.fillStyle = colorPalette[i];
                    ctx.fill();
                    ctx.strokeStyle = '#333';
                    ctx.lineWidth = 1;
                    ctx.stroke();
                    
                    // Position label below marker
                    const label = labelElements[i === 0 ? 'start' : 'end'];
                    label.textContent = click.label;
                    label.style.color = colorPalette[i];
                    label.style.left = `${click.x}px`;
                    label.style.top = `${click.y + 25}px`;
                    label.style.display = 'block';
                }
            }
            
            // Draw the center magenta circle with triangle
            function drawCenterMarker() {
                const circleRadius = 30;
                ctx.beginPath();
                ctx.arc(centerX, centerY, circleRadius, 0, 2 * Math.PI);
                ctx.fillStyle = 'magenta';
                ctx.fill();
                ctx.strokeStyle = '#333';
                ctx.lineWidth = 1;
                ctx.stroke();
                
                const triangleHeight = 20;
                const triangleWidth = 15;
                
                ctx.beginPath();
                ctx.moveTo(centerX, centerY - circleRadius - triangleHeight);
                ctx.lineTo(centerX - triangleWidth, centerY - circleRadius);
                ctx.lineTo(centerX + triangleWidth, centerY - circleRadius);
                ctx.closePath();
                ctx.fillStyle = 'magenta';
                ctx.fill();
                ctx.strokeStyle = '#333';
                ctx.lineWidth = 1;
                ctx.stroke();
            }
            
            // Get hour segment from coordinates
            function getHourSegment(x, y) {
                const dx = x - centerX;
                const dy = y - centerY;
                const angle = Math.atan2(dy, dx);
                
                let hour = ((angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI / 6);
                hour = Math.floor(hour) + 3;
                hour = hour % 12;
                hour = hour === 0 ? 12 : hour;
                
                return hour;
            }
            
            // Handle canvas click
				canvas.addEventListener('click', function(e) {
				// Only allow first click if start SUDS is set
				// Only allow second click if end SUDS is set and we have exactly 1 click so far
				if ((!startSudsValue) || 
					(clicks.length === 1 && !endSudsValue)) return;

                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
                if (distance > radius || distance < 50) return;
                
                for (let i = 0; i < clicks.length; i++) {
                    const click = clicks[i];
                    const markerDistance = Math.sqrt(Math.pow(x - click.x, 2) + Math.pow(y - click.y, 2));
                    if (markerDistance <= 10) return;
                }
                
                const hour = getHourSegment(x, y);
                const now = new Date();
                const timestamp = now.toLocaleTimeString();
                
                const click = {
                    x: x,
                    y: y,
                    hour: hour,
                    timestamp: timestamp,
                    // MODIFICATION: Use text labels instead of letters
                    label: labelNames[clicks.length],
                    color: colorPalette[clicks.length],
                    suds: clicks.length === 0 ? startSudsValue : null,
                    distance: null,
                    eyeLevel: null,
                    position: 'above'
                };
                
                clicks.push(click);
                
                if (clicks.length === 1) {
                    startCompleted = true;
                    click.distance = parseFloat(startDistanceInput.value) || 1.0;
                    click.eyeLevel = parseFloat(startEyeLevelInput.value) || 170;
                    click.position = startAboveInput.checked ? 'above' : 
                                   startBelowInput.checked ? 'below' : 'eye-level';
                } else if (clicks.length === 2) {
                    endCompleted = true;
                    click.distance = parseFloat(endDistanceInput.value) || 1.0;
                    click.eyeLevel = parseFloat(endEyeLevelInput.value) || 170;
                    click.position = endAboveInput.checked ? 'above' : 
                                   endBelowInput.checked ? 'below' : 'eye-level';
                    click.suds = endSudsValue;
                }
                
                drawClock();
                updateLog();
                updateFieldStates();
                
                if (nextLabelCharCode > 90) nextLabelCharCode = 65;
            });
            
            // Update the log with all current values
            function updateLog() {
                clickLog.innerHTML = '';
                
                for (let i = 0; i < clicks.length; i++) {
                    const click = clicks[i];
                    const logEntry = document.createElement('div');
                    logEntry.className = 'log-entry';
                    logEntry.style.color = click.color;
                    
                    const position = i === 0 ? 
                        (startAboveInput.checked ? 'Above' : 
                         startBelowInput.checked ? 'Below' : 'Eye Level') : 
                        (endAboveInput.checked ? 'Above' : 
                         endBelowInput.checked ? 'Below' : 'Eye Level');
                    
                    const distance = i === 0 ? 
                        (startDistanceInput.value || '1.0') : 
                        (endDistanceInput.value || '1.0');
                    
                    const eyeLevel = i === 0 ? 
                        (startEyeLevelInput.value || '170') : 
                        (endEyeLevelInput.value || '170');
                    
                    const suds = i === 0 ? startSudsValue : endSudsValue;
                    
                    const prefix = i === 0 ? 'BEFORE ' : 'AFTER ';
					const bL = '('
					const bR = ')'
                    logEntry.textContent = `${prefix} ${bL}${click.label}${bR}: SUDS=${suds || '?'},   Distance=${distance}m,    Eye Level Position=${eyeLevel}cm ${position}`;
                    clickLog.appendChild(logEntry);
                }
                
                clickLog.scrollTop = clickLog.scrollHeight;
            }
            // NEW FUNCTION: Create semicolon-delimited data string with header
            function createDataLine() {
                const therapist = document.getElementById('therapistNumber').value || 'NA';
                const participant = document.getElementById('participantNumber').value || 'NA';
                const issue = document.getElementById('issueName').value || 'NA';
                const modality = document.getElementById('modality').value || 'NA';
                const hours = document.getElementById('hours').value || '0';
                const date = document.getElementById('sessionDate').value || 'NA';
                
                const startPosition = startAboveInput.checked ? 'above' : 
                                   startBelowInput.checked ? 'below' : 'eye-level';
                const endPosition = endAboveInput.checked ? 'above' : 
                                  endBelowInput.checked ? 'below' : 'eye-level';
                
                const startHour = clicks[0]?.hour || 'NA';
                const endHour = clicks[1]?.hour || 'NA';
                
                // Create header + data
                const header = "therapist;participant;issue;modality;hours;date;startSUDS;startDistance;startEyeLevel;startPosition;startHour;endSUDS;endDistance;endEyeLevel;endPosition;endHour";
                const data = [
                    therapist,
                    participant,
                    issue,
                    modality,
                    hours,
                    date,
                    startSudsValue || 'NA',
                    startDistanceInput.value || 'NA',
                    startEyeLevelInput.value || 'NA',
                    startPosition,
                    startHour,
                    endSudsValue || 'NA',
                    endDistanceInput.value || 'NA',
                    endEyeLevelInput.value || 'NA',
                    endPosition,
                    endHour
                ].join(';');
                
                return header + '\n' + data;
            }
            // Update fields when any input changes
            [startDistanceInput, startEyeLevelInput, startAboveInput, startBelowInput, startEyeLevelRadio,
             endDistanceInput, endEyeLevelInput, endAboveInput, endBelowInput, endEyeLevelRadio].forEach(input => {
                input.addEventListener('change', () => {
                    updateLog();
                    updateFieldStates();
                    
                    if (clicks.length > 0) {
                        clicks[0].distance = parseFloat(startDistanceInput.value) || 1.0;
                        clicks[0].eyeLevel = parseFloat(startEyeLevelInput.value) || 170;
                        clicks[0].position = startAboveInput.checked ? 'above' : 
                                           startBelowInput.checked ? 'below' : 'eye-level';
                    }
                    if (clicks.length > 1) {
                        clicks[1].distance = parseFloat(endDistanceInput.value) || 1.0;
                        clicks[1].eyeLevel = parseFloat(endEyeLevelInput.value) || 170;
                        clicks[1].position = endAboveInput.checked ? 'above' : 
                                            endBelowInput.checked ? 'below' : 'eye-level';
                        clicks[1].suds = endSudsValue;
                    }
                    
                    drawClock();
                });
            });
            
			// Handle download button
			downloadBtn.addEventListener('click', function() {
				const tempCanvas = document.createElement('canvas');
				tempCanvas.width = canvas.width;
				tempCanvas.height = canvas.height + 250; // Adjusted height
				const tempCtx = tempCanvas.getContext('2d');
				
				tempCtx.fillStyle = 'white';
				tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);
				
				// Draw the clock image at the top
				tempCtx.drawImage(canvas, 0, 0);
				
				// Set text styles
				tempCtx.font = 'bold 12px Arial';
				tempCtx.fillStyle = '#000';
				tempCtx.textAlign = 'left';
				
				let yPos = canvas.height + 40;
				
				// Draw Session Information Table (single row)
				tempCtx.fillText('Session Information', 20, yPos);
				yPos += 30;
				
				// Table headers (all in one row)
				tempCtx.fillText('Therapist', 20, yPos);
				tempCtx.fillText('Participant', 105, yPos);
				tempCtx.fillText('Modality', 190, yPos);
				tempCtx.fillText('Issue', 275, yPos);
				tempCtx.fillText('Hours', 355, yPos);
				tempCtx.fillText('Date', 420, yPos);
				yPos += 20;
				
				// Table data (all in one row)
				tempCtx.font = '12px Arial';
				tempCtx.fillText(document.getElementById('therapistNumber').value || 'N/A', 20, yPos);
				tempCtx.fillText(document.getElementById('participantNumber').value || 'N/A', 105, yPos);
				tempCtx.fillText(document.getElementById('modality').value || 'N/A', 190, yPos);
				tempCtx.fillText(document.getElementById('issueName').value || 'N/A', 275, yPos);
				tempCtx.fillText(document.getElementById('hours').value || '0', 355, yPos);
				tempCtx.fillText(document.getElementById('sessionDate').value || 'N/A', 420, yPos);
				yPos += 40;
				
				// Draw Measurements Table
				tempCtx.font = 'bold 12px Arial';
				tempCtx.fillText('Measurements', 20, yPos);
				yPos += 30;
				
				// Measurements table headers
				tempCtx.fillText('', 20, yPos);
				tempCtx.fillText('SUDS', 120, yPos);
				tempCtx.fillText('Distance(m)', 180, yPos);
				tempCtx.fillText('Eye Level(cm)', 280, yPos);
				tempCtx.fillText('Position', 390, yPos);
				yPos += 20;
				
				// Get position values
				const startPosition = startAboveInput.checked ? 'Above' : 
									startBelowInput.checked ? 'Below' : 'Eye Level';
				const endPosition = endAboveInput.checked ? 'Above' : 
								  endBelowInput.checked ? 'Below' : 'Eye Level';
				
				// Measurements table data - BEFORE
				tempCtx.fillText('BEFORE (A)', 20, yPos);
				tempCtx.fillText(startSudsValue || 'N/A', 120, yPos);
				tempCtx.fillText(startDistanceInput.value || 'N/A', 180, yPos);
				tempCtx.fillText(startEyeLevelInput.value || 'N/A', 280, yPos);
				tempCtx.fillText(startPosition, 390, yPos);
				yPos += 20;
				
				// Measurements table data - AFTER
				tempCtx.fillText('AFTER (B)', 20, yPos);
				tempCtx.fillText(endSudsValue || 'N/A', 120, yPos);
				tempCtx.fillText(endDistanceInput.value || 'N/A', 180, yPos);
				tempCtx.fillText(endEyeLevelInput.value || 'N/A', 280, yPos);
				tempCtx.fillText(endPosition, 390, yPos);
				
				const now = new Date();
				const timestamp = now.toISOString().replace(/[:.]/g, '-');
				const filename = `social-panorama-${timestamp}.png`;
				
				const link = document.createElement('a');
				link.download = filename;
				link.href = tempCanvas.toDataURL('image/png');
				link.click();
				
				                // NEW: Create and download data file
                const dataLine = createDataLine();
                const dataBlob = new Blob([dataLine], {type: 'text/plain'});
                const dataUrl = URL.createObjectURL(dataBlob);
                
                const dataLink = document.createElement('a');
                dataLink.download = `social-panorama-data-${timestamp}.txt`;
                dataLink.href = dataUrl;
                document.body.appendChild(dataLink);
                dataLink.click();
                document.body.removeChild(dataLink);
			});     
            // Set today's date in dd mmm yyyy format
            const today = new Date();
            const day = today.getDate().toString().padStart(2, '0');
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const month = monthNames[today.getMonth()];
            const year = today.getFullYear();
            document.getElementById('sessionDate').value = `${day} ${month} ${year}`;
            
            // Initial setup
            updateFieldStates();
            drawClock();
			            // Initial setup
            updateFieldStates();
            drawClock();
            setupEyeLevelHandlers(); // ADDED: Initialize eye level handlers
        });
    </script>
</body>
</html>
